source("~/.active-rstudio-document", echo=TRUE)
mkdir -p inst/extdata
mkdir -p inst/extdata
# Create the 'inst/extdata' directory
dir.create("inst/extdata", recursive = TRUE)
cp /home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/GeneSignaturesTSEscore.xlsx inst/extdata/
cp /home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/GeneSignaturesTSEscore.xlsx /home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/Package/TSECalculator/inst/extdata
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(GSVA)
library(reshape2)
PatientInfo_10 <- read_delim("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/PatientResponseWithAllInfo.tsv", delim = "\t", escape_double = FALSE, trim_ws = TRUE)
library(readxl)
library(dplyr)
library(GSVA)
library(reshape2)
PatientInfo_10 <- read_delim("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/PatientResponseWithAllInfo.tsv", delim = "\t", escape_double = FALSE, trim_ws = TRUE)
library(readxl)
library(dplyr)
library(GSVA)
library(reshape2)
library(readr)
PatientInfo_10 <- read_delim("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/PatientResponseWithAllInfo.tsv", delim = "\t", escape_double = FALSE, trim_ws = TRUE)
metaData_10 <- read_delim("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/metadata_AEC_filtered.tsv", delim = "\t", escape_double = FALSE, trim_ws = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(GSVA)
library(reshape2)
library(readr)
PatientInfo_10 <- read_delim("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/PatientResponseWithAllInfo.tsv", delim = "\t", escape_double = FALSE, trim_ws = TRUE)
metaData_10 <- read_delim("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/metadata_AEC_filtered.tsv", delim = "\t", escape_double = FALSE, trim_ws = TRUE)
GeneSignaturesTSEscore <- read_excel("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/GeneSignaturesTSEscore.xlsx")
CountMatrixAll <- read_delim("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/CountMatrixAll.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
rownames(CountMatrixAll) <- GeneNamesinMatrix
knitr::opts_chunk$set(echo = TRUE)
# Upload libraries
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(stringr)
library(DESeq2)
library(tibble)
library(readxl)
library(pheatmap)
library(survival)
library(survminer)
library(patchwork)
# Upload paths to often used files
path.data = "/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/"
metaData <- read_delim("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/metadata_AEC_filtered.tsv", delim = "\t", escape_double = FALSE, trim_ws = TRUE)
prebiopsy <- read_delim("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/pre_biopsy_drugs_AEC.tsv", delim = "\t", escape_double = FALSE, trim_ws = TRUE)
postbiopsy <- read_delim("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/post_biopsy_drugs_AEC.tsv", delim = "\t", escape_double = FALSE, trim_ws = TRUE)
treatmentresponse <- read_delim("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/treatment_responses_AEC.tsv", delim = "\t", escape_double = FALSE, trim_ws = TRUE)
pre_and_post_biopsy_info <- read_delim("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/Different Groups of Patients/pre_and_post_biopsy_info_both.tsv", delim = "\t", escape_double = FALSE, trim_ws = TRUE)
prebiopsy_immunonaive <- read_delim("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/Different Groups of Patients/prebiopsy_immunonaive.tsv", delim = "\t", escape_double = FALSE, trim_ws = TRUE)
postbiopsy_treated_with_immunotherapy <- read_delim("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/Different Groups of Patients/postbiopsy_treated_with_immunotherapy.tsv", delim = "\t", escape_double = FALSE, trim_ws = TRUE)
# Filter metadata to keep only the oldest sample per patient to ensure immunonaivity
metaData <- metaData %>% group_by(hmfPatientId) %>% filter(biopsyDate == min(biopsyDate)) %>% ungroup()
#Function Import
List_Isofox_data <- function(path.data, metaData){
isofox.cohort = data.frame(sampleId = list.files(paste0(path.data, "data_isofox_AEC/"), recursive = FALSE), "Isofox" = TRUE) %>%
dplyr::mutate(sampleId = gsub("\\..*","", sampleId)) %>%
dplyr::filter(sampleId %in% metaData$sampleId)
return(isofox.cohort)
}
Import_Isofox_data <- function(sampleIds, inputFolders) {
colClasses=c( rep("character",3), rep("numeric",3), "character", rep("numeric",6)
)
importPerSample <- function(sampleId) {
filePath <- paste0(inputFolders, '/', sampleId, '/', sampleId, '.isf.gene_data.csv')
sampleGeneData <- read.csv( file = filePath, header = TRUE, sep = ',',
colClasses = colClasses
)
sampleGeneData$sample <- base::factor( base::gsub('\\.isf\\.gene_data\\.csv', '', base::basename(filePath)))
return(sampleGeneData)
}
data.PerSample <- pbapply::pblapply( sampleIds, function( sampleId) {
importPerSample(sampleId)
}, cl = 1 )
base::names(data.PerSample) <- sampleIds
data.AllSamples <- dplyr::bind_rows(data.PerSample)
}
# Import Isofox data
Isofox_list_cohort.all <- List_Isofox_data(path.data = path.data, metaData = metaData)
Isofox_results_cohort.all <- Import_Isofox_data(Isofox_list_cohort.all$sampleId, paste0(path.data, "data_isofox_AEC/"))
# Filter for only protein-coding genes
gtf.path <- "/data/CBBI_Projects/general/genomes/hsapiens/GRCh38/gencode/v44/gencode.v44.primary_assembly.basic.annotation.gtf"
gene.ids <- GenomicTools.fileHandler::importGTF(gtf.path, level="gene", features=c("gene_id", "gene_name", "gene_type"))
gene.ids <- gene.ids %>% as.data.frame()
selected_gene_types <- c("protein_coding")
gene.ids <- gene.ids %>% dplyr::filter(gene_type %in% selected_gene_types)
Isofox_results_cohort.proteincoding.all <- Isofox_results_cohort.all %>% dplyr::filter(GeneName %in% gene.ids$gene_name)
#Create an table that contains the sampleID and hmfPatientID only to link them
HMFpatientid <- metaData %>% dplyr::select(sampleId, hmfPatientId)
write.csv(HMFpatientid, file = "HMF&SampleID.csv", row.names = FALSE)
# Create a count matrix with samples and genes
Isofox_Gene_Sample_Count <- Isofox_results_cohort.proteincoding.all %>% dplyr::select(GeneName, sample, SplicedFragments)
countMatrix.all <- Isofox_Gene_Sample_Count %>% pivot_wider(names_from = sample, values_from = SplicedFragments)
countMatrix_genes_as_rownames.all <- as.data.frame(countMatrix.all)
rownames(countMatrix_genes_as_rownames.all) <- countMatrix_genes_as_rownames.all[, 1]
countMatrix_genes_as_rownames.all <- countMatrix_genes_as_rownames.all[, -1]
DESeq2.AEC.all <- DESeqDataSetFromMatrix(countData = countMatrix_genes_as_rownames.all, colData = metaData, design = ~1)
DESeq2.AEC.all <- DESeq(DESeq2.AEC.all)
DESeq2.AEC.all.vst <- DESeq2::vst(DESeq2.AEC.all[rowSums(DESeq2::counts(DESeq2.AEC.all, normalized = T)) > 10,], blind = F)
normalized_countMatrix_all <- assay(DESeq2.AEC.all.vst)
normalized_countMatrix_all <- as.data.frame(normalized_countMatrix_all)
GeneNamesinMatrix <- rownames(normalized_countMatrix_all)
write_tsv(normalized_countMatrix_all, "/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/CountMatrixAll.tsv")
# Classify TSE scores
source("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/DataforAlbertosComparison/TSE_Classify/TSE_classify.R")
load("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/DataforAlbertosComparison/TSE_Classify/centroids_TSE.RData")
TSEclass.all <- TSE_classify(x = normalized_countMatrix_all, centroids_TSE = centroids_TSE)
TSEclass.all$TSE_category <- gsub("TSE_negative", "Negative", TSEclass.all$TSE_category)
TSEclass.all$TSE_category <- gsub("TSE_neutral", "Neutral", TSEclass.all$TSE_category)
TSEclass.all$TSE_category <- gsub("TSE_positive", "Positive", TSEclass.all$TSE_category)
# Save TSE scores
write.csv(TSEclass.all, file = "/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/TSE_Scores/TSE_scores_all.csv", row.names = FALSE)
TSE_scores_urothelial <- read.csv("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/TSE_Scores/TSE_Scores_Urothelial.csv")
TSE_scores_all <- read.csv(("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/TSE_Scores/TSE_scores_all.csv"))
joined_uro_scores <- inner_join(TSE_scores_urothelial, TSE_scores_all, by = "sampleId", suffix = c("_uro", "_all"))
joined_uro_scores <- joined_uro_scores %>% dplyr::select(sampleId, TSE_category_uro, TSE_category_all)
joined_uro_scores <- joined_uro_scores %>% mutate(Same = ifelse(TSE_category_uro == TSE_category_all, "Yes", "No"))
joined_uro_scores <- left_join(joined_uro_scores, HMF_SampleID, by = "sampleId")
install.packages(c("usethis", "devtools", "roxygen2", "testthat"))
genesTargetTherapy <- split(gene_signatures$Gene, gene_signatures$signatureID)
library(readxl)
GeneSignaturesTSEscore <- read_excel("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/GeneSignaturesTSEscore.xlsx")
View(GeneSignaturesTSEscore)
genesTargetTherapy <- split(GeneSignaturesTSEscore$Gene, GeneSignaturesTSEscore$signatureID)
View(genesTargetTherapy)
table(GeneSignaturesTSEscore$signatureID)
devtools::document()
devtools::install()
library(TSECalculator)
View(normalized_countMatrix_all)
tse_results <- calculate(normalized_countMatrix_all)
tse_results <- calculate_tse(normalized_countMatrix_all)
normalized_countMatrix_all <- as.matrix(normalized_countMatrix_all)
tse_results <- calculate_tse(normalized_countMatrix_all)
devtools::document()
devtools::install()
library(TSECalculator)
tse_results <- calculate_tse(normalized_countMatrix_all)
unique(GeneSignaturesTSEscore$signatureID)
devtools::document()
devtools::install()
library(TSECalculator)
tse_results <- calculate_tse(normalized_countMatrix_all)
View(tse_results)
compare <- read_delim("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/GeneSignatureScores.tsv", delim = "\t", escape_double = FALSE, trim_ws = TRUE)
View(compare)
> devtools::document()
devtools::document()
devtools::install()
library(TSECalculator)
tse_results <- calculate_tse(normalized_countMatrix_all)
devtools::document()
devtools::install()
library(TSECalculator)
tse_results <- calculate_tse(normalized_countMatrix_all)
devtools::document()
devtools::install()
library(TSECalculator)
tse_results <- calculate_tse(normalized_countMatrix_all)
setwd("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/pantse")
cp Final_Markdowns.*Rmd
cp Final_Markdowns*.Rmd
cp /home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/Final_Markdowns/*.Rmd
cp /home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/Final_Markdowns*.Rmd
library(devtools)
library(roxygen2)
roxygen2::roxygenise("/home/lety/data/CBBI_Projects/panTSE/processed/avankarnebeek/Package/TSECalculatoR")
